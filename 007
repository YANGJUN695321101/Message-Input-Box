import sys

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import (QAction, QApplication, QFileDialog,
                             QGraphicsOpacityEffect, QHBoxLayout, QInputDialog,
                             QLabel, QLineEdit, QListView, QListWidget,
                             QListWidgetItem, QMainWindow, QMenu,
                             QPlainTextEdit, QPushButton, QSizePolicy,
                             QSplitter, QTextEdit, QVBoxLayout, QWidget)


class ChatWindow(QTextEdit):
    def __init__(self, parent=None):
        super(ChatWindow, self).__init__(parent)
        self.setReadOnly(True)


class InputBox(QTextEdit):
    def __init__(self, parent=None):
        super(InputBox, self).__init__(parent)
        self.setPlaceholderText("在此输入文字、表情、图片、视频等内容")


class Contact(QListWidgetItem):
    def __init__(self, name, parent=None):
        super(Contact, self).__init__(parent)
        self.name = name
        self.setText(self.name)


class ContactList(QListWidget):
    def __init__(self, parent=None):
        super(ContactList, self).__init__(parent)
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)

    def show_context_menu(self, pos):
        menu = QMenu(self)
        modify_name_action = menu.addAction("修改联系人名")
        modify_avatar_action = menu.addAction("修改头像")
        modify_intro_action = menu.addAction("修改联系人简介")
        modify_name_action.triggered.connect(self.modify_contact_name)
        modify_avatar_action.triggered.connect(self.modify_contact_avatar)
        modify_intro_action.triggered.connect(self.modify_contact_intro)
        menu.exec_(self.mapToGlobal(pos))

    def modify_contact_name(self):
        current_item = self.currentItem()
        new_name, ok = QInputDialog.getText(self, "修改联系人名", "输入新的联系人名：")
        if ok and new_name:
            current_item.name = new_name
            current_item.setText(new_name)

    def modify_contact_avatar(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "选择头像", "", "Images (*.png *.jpg *.gif)")
        if file_name:
            current_item = self.currentItem()
            current_item.setIcon(QIcon(file_name))

    def modify_contact_intro(self):
        current_item = self.currentItem()
        new_intro, ok = QInputDialog.getMultiLineText(self, "修改联系人简介", "输入新的联系人简介：")
        if ok and new_intro:
            current_item.setToolTip(new_intro)


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle("007")
        self.setWindowIcon(QIcon("icon.png"))
        self.setGeometry(100, 100, 800, 600)

        self.init_ui()

    def init_ui(self):
        main_widget = QWidget(self)
        self.setCentralWidget(main_widget)

        main_layout = QVBoxLayout(main_widget)

        splitter = QSplitter(Qt.Horizontal)

        self.contact_list = ContactList()
        self.contact_list.itemClicked.connect(self.change_chat_window)
        splitter.addWidget(self.contact_list)

        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)

        self.chat_window = ChatWindow()
        right_layout.addWidget(self.chat_window)

        input_widget = QWidget()
        input_layout = QVBoxLayout(input_widget)

        self.input_box = InputBox()
        input_layout.addWidget(self.input_box)

        send_button = QPushButton("发送")
        send_button.clicked.connect(self.send_message)
        input_layout.addWidget(send_button)

        right_layout.addWidget(input_widget)
        splitter.addWidget(right_widget)

        main_layout.addWidget(splitter)
        # Define the left layout
        left_layout = QVBoxLayout()
        left_layout.addWidget(self.input_text)
        left_layout.addWidget(self.send_button)

        # Define the left widget
        left_widget = QWidget()
        left_widget.setLayout(left_layout)

        # Set the left widget as the main part of the main window
        self.setCentralWidget(left_widget)

        # 5. 添加头像显示
        avatar = QLabel(self)
        avatar.setPixmap(QPixmap("D:\\DESK\\GPT-3.5\\ABC.png").scaled(50, 50, Qt.KeepAspectRatio))
        avatar_layout = QVBoxLayout()
        avatar_layout.addWidget(avatar)
        left_layout.addLayout(avatar_layout)
        # 8. 添加联系人右键菜单栏
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self.contact_context_menu)

        self.add_contacts()
    def contact_context_menu(self, pos):
        # 创建一个右键菜单
        menu = QMenu(self)

        # 添加菜单项
        change_name_action = menu.addAction("修改联系人聊天窗口名字")
        change_avatar_action = menu.addAction("修改联系人聊天窗口头像")
        change_intro_action = menu.addAction("修改联系人简介")

        # 将菜单项与槽函数连接
        change_name_action.triggered.connect(self.change_contact_name)
        change_avatar_action.triggered.connect(self.change_contact_avatar)
        change_intro_action.triggered.connect(self.change_contact_intro)

        # 在鼠标点击的位置显示菜单
        menu.exec_(self.list_widget.mapToGlobal(pos))


    def add_contacts(self):
        # 添加联系人示例
        contact1 = Contact("联系人1")
        self.contact_list.addItem(contact1)
        contact2 = Contact("联系人2")
        self.contact_list.addItem(contact2)

    def change_chat_window(self, item):
        # 更改聊天窗口标题为当前联系人名
        self.chat_window.setWindowTitle(item.name)

    def send_message(self):
        # 发送消息示例
        text = self.input_box.toPlainText()
        if text:
            self.chat_window.append(text)
            self.input_box.clear()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())

